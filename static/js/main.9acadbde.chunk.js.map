{"version":3,"sources":["hash.js","config.js","lib/components/login/index.js","lib/components/header/index.js","lib/components/track/index.js","lib/components/topTracks/index.js","lib/components/recentlyPlayed/index.js","lib/components/topArtists/index.js","lib/util/ajaxSend.js","lib/queries/getUserTop.js","lib/queries/getUser.js","lib/queries/getRecentlyPlayed.js","App.js","serviceWorker.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","scopes","Login","className","href","join","Header","props","user","Track","src","img","name","artist","TopTracks","items","map","artists","album","images","url","RecentlyPlayed","track","TopArtists","type","token","cb","$","beforeSend","xhr","setRequestHeader","success","data","error","console","log","ajaxSend","response","App","state","topTracks","topArtists","recentlyPlayed","getUser","bind","getRecentlyPlayed","getUserTop","setState","_token","access_token","this","executeQueries","display_name","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9acadbde.chunk.js","sourcesContent":["const hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(( initial, item ) => {\r\n        if( item ) {\r\n            var parts = item.split(\"=\")\r\n            initial[parts[0]] = decodeURIComponent(parts[1])\r\n        }\r\n\r\n        return initial\r\n    }, {})\r\n\r\nwindow.location.hash = \"\"\r\n\r\nexport default hash","export const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\n// Replace with your app's client ID, redirect URI and desired scopes\r\nexport const clientId = \"49c1e8e2a2474e76a62429a01cc8176d\";\r\nexport const redirectUri = \"http://localhost:3000/\";\r\nexport const scopes = [\r\n    \"user-read-recently-played\",\r\n];","import React from \"react\"\r\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../../../config\"\r\n\r\nfunction Login() {\r\n\r\n    return (\r\n        <a className=\"btn btn--loginApp-link\"\r\n            href={\r\n                `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\") }\r\n                &response_type=token&show_dialog=true` \r\n            }>\r\n            Login to Spotify\r\n        </a>\r\n    )\r\n\r\n}\r\n\r\nexport default Login ","import React from \"react\"\r\n\r\nfunction Header( props ) {\r\n\r\n    return (\r\n        <div>\r\n            <div>Bem-vindo, {props.user}</div>\r\n            <div>Aqui est√£o alguns dados sobre a sua conta do Spotify</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header ","import React from \"react\"\r\n\r\nfunction Track( props ) {\r\n\r\n    return (\r\n        <div className=\"track container\">\r\n            <img className=\"track item\" src={props.img}/>\r\n            <label className=\"track item\" >{props.name}</label> \r\n            <label className=\"track item\" >{props.artist}</label> \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Track ","import React from \"react\"\r\nimport Track from \"../track\"\r\n\r\nfunction TopTracks( props ) {\r\n\r\n    return (\r\n        props.items.map( item => (\r\n            <Track \r\n                name={ item.name }\r\n                artist={ item.artists[0].name }\r\n                img={ item.album.images[1].url }>\r\n            </Track>\r\n        ))\r\n    )\r\n\r\n}\r\n\r\nexport default TopTracks ","import React from \"react\"\r\nimport Track from \"../track\"\r\n\r\nfunction RecentlyPlayed( props ) {\r\n\r\n    return (\r\n        props.items.map( item => (\r\n            <Track \r\n                name={ item.track.name }\r\n                artist={ item.track.artists[0].name }\r\n                img={ item.track.album.images[1].url }>\r\n            </Track>\r\n        ))\r\n    )\r\n\r\n}\r\n\r\nexport default RecentlyPlayed ","import React from \"react\"\r\nimport Track from \"../track\"\r\n\r\nfunction TopArtists( props ) {\r\n\r\n    return (\r\n        props.items.map( item => (\r\n            <Track \r\n                artist={ item.name }\r\n                img={ item.images[1].url }>\r\n            </Track>\r\n        ))\r\n    )\r\n\r\n}\r\n\r\nexport default TopArtists ","import * as $ from \"jquery\"\r\n\r\nexport default ( url, type, token, cb ) => {\r\n\r\n    $.ajax({\r\n        url: url,\r\n        type: type,\r\n        beforeSend: (xhr) => {\r\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n        },\r\n        success: (data) => {\r\n            cb( data )\r\n        },\r\n        error: function( error ) {\r\n            console.log( error );\r\n        }\r\n    })\r\n}","import ajaxSend from '../util/ajaxSend'\r\n\r\nexport default ( type, token, cb ) => {\r\n\r\n    ajaxSend( `https://api.spotify.com/v1/me/top/${type}`, 'GET', token, ( response ) => {\r\n        if( cb ) cb( response )\r\n    })\r\n\r\n}","import ajaxSend from '../util/ajaxSend'\r\n\r\nexport default ( token, cb ) => {\r\n\r\n    ajaxSend( `https://api.spotify.com/v1/me`, 'GET', token, ( response ) => {\r\n        if( cb ) cb( response )\r\n    })\r\n\r\n}","import ajaxSend from '../util/ajaxSend'\r\n\r\nexport default ( token, cb ) => {\r\n\r\n    ajaxSend( 'https://api.spotify.com/v1/me/player/recently-played', 'GET', token, ( response ) => {\r\n        if( cb ) cb( response )\r\n    })\r\n\r\n}","import React, { Component } from \"react\"\nimport hash from \"./hash\"\nimport \"./App.css\"\n\n//components\nimport Login from './lib/components/login'\nimport Header from './lib/components/header'\nimport TopTracks from './lib/components/topTracks'\nimport RecentlyPlayed from './lib/components/recentlyPlayed'\nimport TopArtists from './lib/components/topArtists'\n\n//queries\nimport getUserTop from './lib/queries/getUserTop'\nimport getUser from './lib/queries/getUser'\nimport getRecentlyPlayed from './lib/queries/getRecentlyPlayed'\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            user: null,\n            token: null,\n            topTracks: [],\n            topArtists: [],\n            recentlyPlayed: []\n        }\n\n        this.getUser = getUser.bind(this)\n        this.getRecentlyPlayed = getRecentlyPlayed.bind(this)\n        this.getUserTop = getUserTop.bind(this)\n    }\n\n    executeQueries( token ) {\n        getUser( token, ( response ) => {\n            this.setState({\n                user: response\n            })\n        })\n\n        getRecentlyPlayed( token, ( response ) => {\n            this.setState({\n                recentlyPlayed: response.items\n            })\n        })\n\n        getUserTop( 'tracks', token, ( response ) => {\n            this.setState({\n                topTracks: response.items\n            })\n        })\n\n        getUserTop( 'artists', token, ( response ) => {\n            this.setState({\n                topArtists: response.items\n            })\n        })\n    }\n\n    componentDidMount() {\n        let _token = hash.access_token;\n\n        if( _token ) {\n            this.setState({\n                token: _token\n            })\n\n            this.executeQueries( _token )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    { ! this.state.token && <div className=\"app header\">Spotistics</div> }\n                    { !this.state.token && (\n                        <Login/>\n                    ) }\n                    { this.state.user && <Header user={this.state.user.display_name}/> }\n                </header>\n                <body className=\"app body\">\n                    <div className=\"main container\">\n                        <RecentlyPlayed items={ this.state.recentlyPlayed }/>\n                        <TopArtists items={ this.state.topArtists }/>\n                        <TopTracks items={ this.state.topTracks }/>\n                    </div>\n                </body>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}